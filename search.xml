<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2小时学会Spring Boot（一）</title>
    <url>/2021/05/19/2%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9ASpring-Boot%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1>Spring Boot</h1>
<h2 id="意义">意义</h2>
<p><em>简化配置</em> <em>敏捷开发</em></p>
<h2 id="启动Spring-Boot-三种方式">启动Spring Boot 三种方式</h2>
<p><strong>方式一</strong></p>
<p>直接在项目中启动 被 <code>@SpringBootApplication</code> 注解修饰的类中的 主线程方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>方式二</strong></p>
<p>进入项目目录下使用命令启动</p>
<p><code>mvn spring-boot:run</code></p>
<p><strong>方式三</strong></p>
<ol>
<li>使用mvn 命令 将项目编译生成 jar文件<br>
<code>mvn install</code></li>
<li>进入项目的target目录下<br>
<code>cd target/</code></li>
<li>java命令启动jar文件<br>
<code>java -jar [**项目名**].jar</code></li>
</ol>
<h2 id="配置">配置</h2>
<p>方式①：<strong>application.properties</strong>  IDE生成的项目默认采用的配置<br>
配置字段冗余、不利于书写和查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=8085</span><br><span class="line">server.context-path=/girl</span><br></pre></td></tr></table></figure>
<p>方式②：<strong>application.yml</strong><br>
主流的spring -boot 项目使用的配置，建议使用此配置<br>
树状结构，一目了然</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8082    //key后面的：冒号，根据规则，一定要加一个空格，配置才可生效</span><br><span class="line">  context-path: /girl</span><br></pre></td></tr></table></figure>
<p>注①：如果项目中同时存在两种配置文件 ，会优先使用properties文件的配置</p>
<p>注②：更改项目配置为yml 配置后，一定要先删除原有properties配置，然后在项目目录下执行<br>
<code>maven -X clean install</code></p>
<h2 id="application-yml配置与Controller层的注入方式">application.yml配置与Controller层的注入方式</h2>
<p>@Value  ：声明所标注属性的值，其值通过EL表达式来与yml文件中的key进行映射<br>
<strong>属性注入</strong></p>
<p><em>Controller层属性</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Value(&quot;$&#123;name&#125;&quot;)</span><br><span class="line">   private String name;</span><br><span class="line">@Value(&quot;$&#123;age&#125;&quot;)</span><br><span class="line">   private Integer age;</span><br><span class="line">@Value(&quot;$&#123;content&#125;&quot;)</span><br><span class="line">   private String content;</span><br></pre></td></tr></table></figure>
<p><em>yml文件</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"> name: Tomcat</span><br><span class="line"> age: 20</span><br><span class="line"> #yum文件中也可以通过EL表达式方式操作key来得到value ，</span><br><span class="line"> #在这里name和age组成了一个新的value ,成为了content 这个key 的value</span><br><span class="line"> content: &quot;$&#123;name&#125;$&#123;age&#125;&quot;</span><br></pre></td></tr></table></figure>
<p><em>Controller层方法</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &quot;hello&quot;,method = RequestMethod.GET)</span><br><span class="line">   public String hello()&#123;</span><br><span class="line">       return &quot;name:&quot;+name+&quot;\t&quot;+&quot;age:&quot;+age+&quot;\t&quot;+&quot;组合内容:&quot;+content;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><em>浏览器访问</em><br>
<img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210519020935" alt=""></p>
<p><strong>对象注入</strong></p>
<p>@ConfigurationProperties(prefix = “student”)  :<br>
将当前类与配置文件做一个映射，prefix=&quot;student&quot;表明当前类所映射的是 前缀是student ，前缀是配置文件中的key。</p>
<p><em>创建实体类</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;student&quot;)</span><br><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>yum文件</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#省略</span><br><span class="line">student:</span><br><span class="line">  name: Tomcat</span><br><span class="line">  age: 20</span><br><span class="line">#省略</span><br></pre></td></tr></table></figure>
<p><em>Controller层</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Student student;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;hello&quot;,method = RequestMethod.GET)</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;name:&quot;+student.getName()+&quot;\t&quot;+&quot;age:&quot;+student.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多环境配置">多环境配置</h2>
<p><strong>application.yml</strong>     master配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: prod #当前默认使用的是哪个配置 ，此处引入的value是 salver配置文件 的后缀</span><br></pre></td></tr></table></figure>
<p><strong>application-prod.yml</strong>    salver配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#生产环境</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">student:</span><br><span class="line">  name: Jeck-chen</span><br><span class="line">  age: 49</span><br></pre></td></tr></table></figure>
<p><strong>application-dev.yml</strong>     salver配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开发环境</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">student:</span><br><span class="line">  name: Goofy</span><br><span class="line">  age: 24</span><br></pre></td></tr></table></figure>
<h2 id="运行项目">运行项目</h2>
<p>以下方式是直接在外部启动，并直接使用指定的某类配置</p>
<pre><code> *过程：*
 `cd [项目目录]`
 `mvn clean install`
 `java -jar target/demo-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev`
</code></pre>
<h2 id="Controller的使用">Controller的使用</h2>
<p><code>@Controller</code> :  <strong>声明控制层，用于处理HTTP请求和响应</strong></p>
<p><code>@RestController</code> : <strong>同上，其所标注的代码块所返回的类型为json格式，等同于 @Controller + @ResponseBody</strong></p>
<p><code>@RequestMapping</code> : <strong>客户端请求url映射</strong></p>
<p><code>@PathVariable</code>: <strong>获取url中的数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &#123;&quot;/index/&#123;id&#125;&quot;&#125;,method = RequestMethod.GET) //http://127.0.0.1:8080/index/1231</span><br><span class="line">    public String hello(Map&lt;String,Object&gt; model,</span><br><span class="line">                        @PathVariable(value = &quot;id&quot;) Integer id)&#123;</span><br><span class="line">        model.put(&quot;id&quot;,id);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>@RequestParam</code> : <strong>获取请求参数的值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &#123;&quot;/index&quot;&#125;,method = RequestMethod.GET)</span><br><span class="line">   public String hello(Map&lt;String,Object&gt; model,</span><br><span class="line">                       @RequestParam(value = &quot;id&quot;,</span><br><span class="line">                                     defaultValue = &quot;1001&quot;,//默认值</span><br><span class="line">                                     required = false) //是否必须</span><br><span class="line">                                     Integer id)&#123;</span><br><span class="line">       model.put(&quot;id&quot;,id);</span><br><span class="line">       return &quot;index&quot;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><code>@GetMapping</code>: 组合注解 ，此类注解有多个，这里的 等同于</p>
<p><code>@RequestMapping(value = &#123;&quot;/hello&quot;&#125;,method = RequestMethod.GET)</code>。<br>
与此类似，如<code>@PostMapping</code> 则是以Post方式访问</p>
<h2 id="Spring-Boot-与Freemarker-整合">Spring-Boot 与Freemarker 整合</h2>
<p><em>pom.xml添加依赖支持</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- spring freemarker 支持--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><em>application.yml添加配置配置</em></p>
<p><strong>若在master配置文件中配置，则主配置中的配置信息在子配置中是共享的</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#freemaker 配置</span><br><span class="line">  freemarker:</span><br><span class="line">    request-context-attribute: req  #req访问request</span><br><span class="line">    suffix: .html  #后缀名</span><br><span class="line">    content-type: text/html</span><br><span class="line">    enabled: true</span><br><span class="line">    cache: false #缓存配置</span><br><span class="line">    template-loader-path: classpath:/templates/ #模板加载路径 按需配置</span><br><span class="line">    charset: UTF-8 #编码格式</span><br><span class="line">    settings:</span><br><span class="line">      number_format: &#x27;0.##&#x27;   #数字格式化，无小数点</span><br></pre></td></tr></table></figure>
<p><em>Controller方法</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(value = &#123;&quot;/hello&quot;,&quot;/hi&quot;&#125;)   //使用集合，可使此方法 同时映射多个 url访问路径</span><br><span class="line">public String hello(Map&lt;String,Object&gt; model)&#123;</span><br><span class="line">        model.put(&quot;student&quot;,student);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>index.html</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;名称:$&#123;student.name!&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄:$&#123;student.age!&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-Data-Jpa">Spring-Data-Jpa</h2>
<p>对象持久化的标准，目前支持这一规范的产品有 hibernate、TopLink等<br>
可以理解其为 <strong>spring-boot 与 hibernate 整合</strong></p>
<p>作用：<strong>建立实体类之后，运行项目即可生成数据库表结构</strong></p>
<p><em>pom.xml添加依赖</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- spring-data-jpa 支持--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mysql 支持--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><em>yml配置</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#父配置</span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    #当前使用的子配置文件 ,value 为子配置的名称后缀</span><br><span class="line">    active: dev</span><br><span class="line">  #数据源配置</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/student</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  #spring—data jpa配置</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate: #hibernate集成</span><br><span class="line">      #create 每次启动根据实体类创建一张空表； </span><br><span class="line">      #update 第一次启动创建表，之后再启动，若表内有数据不会删除</span><br><span class="line">      #create-drop 应用停止，数据自动删除表</span><br><span class="line">      #none 不执行任何操作</span><br><span class="line">      #validate 验证实体类 与 表结构是否一致 ，否则报错</span><br><span class="line">      ddl-auto: create   </span><br><span class="line">    show-sql: true</span><br></pre></td></tr></table></figure>
<p><em>实体类</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Entity   //声明为实体类</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id             //此属性为主键</span><br><span class="line">    @GeneratedValue //自动生成</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String age;</span><br><span class="line">//构造方法及get/set方法省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Dao</em></p>
<p><strong>接口 : <code>JpaRepository&lt;T, ID&gt;</code></strong><br>
Spring-Data JPA的核心，继承JpaRepository的类或接口 才可以使用Hibernate提供的众多访问数据库的方法，其中泛型&lt;T, ID&gt; ,T为实体类的类型，ID为实体类的主键的的类型</p>
<p><strong>方式（一）Jpa自定义方法: <code>findByAge</code></strong><br>
只有按照这种方式书写才可以根据By后面的字段去查找数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Repository //数据访问组件，DAO组件</span><br><span class="line">public interface StudentRepository extends JpaRepository&lt;Student,Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义方法</span><br><span class="line">     * 通过 age 查询</span><br><span class="line">     * 方法名规范 ，findByAge</span><br><span class="line">     * 只有按照这种方式书写才可以根据By后面的字段去查找数据库</span><br><span class="line">     * @param age</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    List&lt;Student&gt; findByAge(String age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>方式（二）原生SQL方法</strong><br>
参数在SQL语句中通过 <code>?1</code> 这种形式形成映射关系，若存在第二个参数，则为<code>?2</code>，以此类推。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface StudentRepository extends JpaRepository&lt;Student, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Query(value = &quot;SELECT id,age,`NAME` FROM student WHERE 1 = 1 AND age = ?1&quot;,nativeQuery = true)</span><br><span class="line">    List&lt;Student&gt; findByAge(Integer age);</span><br><span class="line"></span><br><span class="line">    @Query(value = &quot;SELECT stu.id,stu.name,stu.age FROM student stu WHERE 1 = 1&quot;,nativeQuery = true)</span><br><span class="line">    List&lt;Student&gt; findAll() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>StudentController</em></p>
<p><strong><code>Optional&lt;T&gt;</code></strong><br>
java8 新特性，用它来<strong>封装可能为空的引用，防止空指针异常</strong>，<br>
官方解释：这是一个可以为null的容器对象。如果值存在则<code>isPresent()</code>方法会返回<code>true</code>，调用<code>get()</code>方法会返回该对象。</p>
<p><strong><code>studentRepository</code></strong><br>
直接调用Hibernate提供的众多访问数据库的方法，省去编写SQL语句的时间，从而提高了开发效率。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/student&quot;)</span><br><span class="line">public class StudentController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;/list&quot;)</span><br><span class="line">    public List&lt;Student&gt; getList()&#123;</span><br><span class="line">        return studentRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(value = &quot;/add&quot;)</span><br><span class="line">    public Map&lt;String,Object&gt; addStudent(@RequestParam(value = &quot;name&quot;,required = false) String name,</span><br><span class="line">                                         @RequestParam(value = &quot;age&quot;,required = false) String age)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; mv = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        if(Strings.isBlank(name)||Strings.isBlank(age))&#123;</span><br><span class="line">            mv.put(&quot;code&quot;,0);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;fail&quot;);</span><br><span class="line">            mv.put(&quot;messaage&quot;,&quot;请求参数为空&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">        &#125;</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        student.setName(name);</span><br><span class="line">        student.setAge(age);</span><br><span class="line">        Student stu = studentRepository.save(student);</span><br><span class="line">        mv.put(&quot;code&quot;,1);</span><br><span class="line">        mv.put(&quot;desc&quot;,&quot;success&quot;);</span><br><span class="line">        mv.put(&quot;obj&quot;,stu);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(value = &quot;/list/id/&#123;id&#125;&quot;)</span><br><span class="line">    public Map&lt;String,Object&gt; queryById(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; mv = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        Optional&lt;Student&gt; student = studentRepository.findById(id);</span><br><span class="line">        if (student.isPresent()==false)&#123;</span><br><span class="line">            mv.put(&quot;code&quot;,0);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;无此条记录&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">        &#125;</span><br><span class="line">            mv.put(&quot;code&quot;,1);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;success&quot;);</span><br><span class="line">            mv.put(&quot;obj&quot;,student);</span><br><span class="line">            return mv;</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(value = &quot;/edit/&#123;id&#125;&quot;)</span><br><span class="line">    public Map&lt;String,Object&gt; edit(@PathVariable(&quot;id&quot;) Integer id,</span><br><span class="line">                                   @RequestParam(&quot;name&quot;) String name,</span><br><span class="line">                                   @RequestParam(&quot;age&quot;) String age)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; mv = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        if (id==null)&#123;</span><br><span class="line">            mv.put(&quot;code&quot;,0);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;请求参数有误&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">        &#125;</span><br><span class="line">        if(((Integer) queryById(id).get(&quot;code&quot;))==0)&#123;</span><br><span class="line">            mv.put(&quot;code&quot;,0);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;无此条记录&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">        &#125;</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        student.setId(id);</span><br><span class="line">        student.setName(name);</span><br><span class="line">        student.setAge(age);</span><br><span class="line"></span><br><span class="line">        mv.put(&quot;code&quot;,1);</span><br><span class="line">        mv.put(&quot;obj&quot;,studentRepository.save(student));</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(value = &quot;/remove&quot;)</span><br><span class="line">    public Map&lt;String,Object&gt; delete(@RequestParam(value = &quot;id&quot;) Integer id)&#123;</span><br><span class="line">        Map&lt;String,Object&gt; mv = new HashMap&lt;String,Object&gt;();</span><br><span class="line">        if(((Integer) queryById(id).get(&quot;code&quot;))==0)&#123;</span><br><span class="line">            mv.put(&quot;code&quot;,0);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;无此条记录&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">        &#125;</span><br><span class="line">            studentRepository.deleteById(id);</span><br><span class="line">            mv.put(&quot;code&quot;,1);</span><br><span class="line">            mv.put(&quot;desc&quot;,&quot;success&quot;);</span><br><span class="line">            return mv;</span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(value = &quot;/list/age/&#123;age&#125;&quot;)</span><br><span class="line">    public List&lt;Student&gt; queryByAge(@PathVariable(value = &quot;age&quot;) String age)&#123;</span><br><span class="line">        return studentRepository.findByAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-Boot事务管理">Spring-Boot事务管理</h2>
<p><strong>事务的四大特性</strong></p>
<ul>
<li><strong>原子性（Atomicity）</strong><br>
事务包含的所有操作要么全部成功，要么全部失败回滚</li>
<li><strong>一致性（Consistency）</strong><br>
数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li>
<li><strong>隔离性（Isolation）</strong><br>
隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>
<li><strong>持久性（Durability）</strong><br>
持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>
</ul>
<p><strong>使用场景</strong><br>
事务管理操作常用于，在<strong>业务场景</strong>下存在多次对数据库<strong>增删改</strong>的操作时，此时需要开启事务。</p>
<ul>
<li>增删改      ：必须开启</li>
<li>查询操作  ：视业务场景，非必须</li>
</ul>
<p><code>@EnableTransactionManagement</code>：<br>
主线程加入这个注解，<strong>使当前项目支持事务管理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 启注解事务管理器，等同于xml配置方式的 &lt;tx:annotation-driven /&gt;</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Transactional</code>:<br>
通常用在service层的类或方法上，<strong>使当前标注的代码块支持事务操作</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service(value = &quot;studentService&quot;)</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">    @Transactional</span><br><span class="line">    public void insertStudent() &#123;</span><br><span class="line">     //省略  假设这里有多个增删改数据库的操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2小时学会Spring Boot（三）</title>
    <url>/2021/05/19/2%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9ASpring-Boot%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li>
<h2 id="服务响应对象">服务响应对象</h2>
</li>
</ul>
<p><em>ServerResponse<T> 服务响应类</em></p>
<span id="more"></span>  
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 服务响应类</span><br><span class="line"> * Created by gf on 2018/10/20.</span><br><span class="line"> */</span><br><span class="line">//保证序列化json的时候，如果是null的对象，key也会消失</span><br><span class="line">@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)</span><br><span class="line">public class ServerResponse&lt;T&gt; implements Serializable&#123;</span><br><span class="line"></span><br><span class="line">    private int code;   //状态码</span><br><span class="line">    private String msg; //描述</span><br><span class="line">    private T data;     //对象</span><br><span class="line"></span><br><span class="line">    private ServerResponse(int code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ServerResponse(int code, String msg) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ServerResponse(int code, String msg, T data) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ServerResponse(int code, T data) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断这个响应是否是一个成功的响应</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @JsonIgnore //使这个方法的返回值不在Json序列化结果当中</span><br><span class="line">    public boolean isSuccess()&#123;</span><br><span class="line">        return this.code==ResponseCode.SUCCESS.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">    public int getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsg() &#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T getData() &#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单例模式 创建返回响应对象</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess()&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccessMessage(String msg)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccessData(T data)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccessMsgData(String msg,T data)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),msg,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createByError()&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.ERROR.getCode(),ResponseCode.ERROR.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createByErrorMessage(String errorMsg)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.ERROR.getCode(),errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createByErrorCodeMessage(int errorCode,String errorMsg)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(errorCode,errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>ResponseCode 枚举常量类</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 枚举常量</span><br><span class="line"> * Created by gf on 2018/10/20.</span><br><span class="line"> */</span><br><span class="line">public enum  ResponseCode &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(0,&quot;SUCCESS&quot;),</span><br><span class="line">    ERROR(1,&quot;ERROR&quot;),</span><br><span class="line">    NEED_LOGIN(10,&quot;NEED_LOGIN&quot;),</span><br><span class="line">    ILLEGAL_ARGUMENT(20,&quot;ILLEGAL_ARGUMENT&quot;);</span><br><span class="line"></span><br><span class="line">    private int code;</span><br><span class="line">    private String desc;</span><br><span class="line"></span><br><span class="line">    ResponseCode(int code, String desc) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Controller方法中的应用</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 添加</span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line"> @PostMapping(value = &quot;/add&quot;)</span><br><span class="line"> public ServerResponse&lt;Student&gt; addStudent(@Valid Student student,</span><br><span class="line">                                  BindingResult bindingResult)&#123;</span><br><span class="line">     if(bindingResult.hasErrors())</span><br><span class="line">         return ServerResponse.createByErrorMessage(bindingResult.getFieldError().getDefaultMessage());</span><br><span class="line">     return ServerResponse.createBySuccessData(studentRepository.save(student));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<h2 id="统一异常处理">统一异常处理</h2>
</li>
</ul>
<p><em>自定义异常</em></p>
<p>应用场景：JDK中的异常类型不能满足程序的需要时，可以自定义异常<br>
实现方式：继承Exception和RunTimeException<br>
<strong>Spring framework 针对<code>RuntimeException</code>才会进行事务回滚</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class StudentException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">    private int code;</span><br><span class="line"></span><br><span class="line">    public StudentException(int code,String exceptionMsg) &#123;</span><br><span class="line">        super(exceptionMsg);</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(int code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>异常捕获</em><br>
<strong>@ControllerAdvice</strong> + <strong>@ExceptionHandler</strong> 全局处理 Controller 层异常</p>
<p><code>@ControllerAdvice</code><br>
标注的类为异常处理类</p>
<p><code>@ExceptionHandler(value = Exception.class)</code><br>
标注的当前方法为异常处理方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice //标注的类为异常处理类</span><br><span class="line">public class ExceptionHandle &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(ExceptionHandle.class);</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value = Exception.class) //标注的当前方法为异常处理方法</span><br><span class="line">    @ResponseBody</span><br><span class="line">    private ServerResponse handle(Exception e)&#123;</span><br><span class="line">        if(e instanceof StudentException)&#123;</span><br><span class="line">            StudentException se = (StudentException)e;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(se.getCode(),se.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(&quot;【异常信息】&quot;,e.toString());</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ERROR_EXCEPTION.getCode(),ResponseCode.ERROR_EXCEPTION.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>抛出异常</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ServerResponse&lt;List&lt;Student&gt;&gt; findByAge(Integer age) throws StudentException &#123;</span><br><span class="line">        if(age&lt;10)</span><br><span class="line">            throw  new StudentException(StudentExceptionCode.PRIMARY_SCHOOL);</span><br><span class="line">        else if (age&gt;10&amp;&amp;age&lt;15)</span><br><span class="line">            throw new StudentException(StudentExceptionCode.MIDDLE_SCHOOL);</span><br><span class="line">        return ServerResponse.createBySuccessData(studentRepository.findByAge(age));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>2小时学会Spring Boot（二）</title>
    <url>/2021/05/19/2%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9ASpring-Boot%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="表单验证">表单验证</h2>
<p><em>验证功能是在Controller层进行编写</em></p>
<p><code> @Min(value = 18,message = &quot;未成年，禁止上网吧&quot;)</code></p>
<span id="more"></span>
<p>来自 javax.validation.constraints.Min ，用于定义在实体类的属性上 ，用作约束该属性的范围，其中 <code>value</code> 为值 ，<code>message</code> 为提示信息。</p>
<p><code>@Valid</code></p>
<p>来自 javax.validation.Valid ，用于定义在形参上，所标注的参数为一个实体类（类中有相应的验证注解），用来使 <code>@Min</code> 此类注解在代码中生效。</p>
<p><code>BindingResult</code></p>
<p>接口验证的结果会赋在此类上面，通过此类的一系列方法在代码块中进行流程控制。</p>
<p><strong>实体类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    @Min(value = 18,message = &quot;未成年，禁止上网吧&quot;)</span><br><span class="line">    private String age;</span><br><span class="line">    //省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Controller类中的方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostMapping(value = &quot;/add&quot;)</span><br><span class="line">public Map&lt;String,Object&gt; addStudent(@Valid Student student,</span><br><span class="line">                                     BindingResult bindingResult)&#123;</span><br><span class="line">    Map&lt;String,Object&gt; mv = new HashMap&lt;&gt;();</span><br><span class="line">    //如果发生错误</span><br><span class="line">    if(bindingResult.hasErrors())&#123;                                             </span><br><span class="line">        logger.info(bindingResult.getFieldError().getDefaultMessage());</span><br><span class="line">        //验证不通过 返回 null</span><br><span class="line">        return null;                             </span><br><span class="line">    &#125;</span><br><span class="line">    Student stu = studentRepository.save(student);</span><br><span class="line">    mv.put(&quot;code&quot;,1);</span><br><span class="line">    mv.put(&quot;desc&quot;,&quot;success&quot;);</span><br><span class="line">    mv.put(&quot;obj&quot;,stu);</span><br><span class="line">    return mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AOP">AOP</h2>
<p><em><strong>编程思想——&gt;面向切面编程</strong></em><br>
<em>将通用的逻辑从业务逻辑中抽离出来</em><br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143d41f735484f?w=1239&amp;h=696&amp;f=png&amp;s=238246" alt="image.png"></p>
<p><em>pom.xml添加依赖</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- spring-boot-aop 支持--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><code>@Aspect</code> 声明当前类为Aop的实现类</p>
<p><code>@Component</code> 声明当前类为Spring中的一个组件</p>
<p><code>@Pointcut</code> 设置一个通用的切入点</p>
<p><code>@Before</code> 方法之前执行</p>
<p><code>@After</code> 方法之后执行</p>
<p><code>&quot;execution(public * com.example.demo.controller.StudentController.*(..))&quot;</code></p>
<p>作为Aop注解的参数，设置执行的方法类型。</p>
<p>   *    : 模糊匹配<br>
（…)  :  参数匹配</p>
<p><em>aop实现类</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LoginAspect &#123;</span><br><span class="line">    long startTime;</span><br><span class="line">    long endTime;</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(LoginAspect.class);</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(public * com.example.demo.controller.StudentController.*(..))&quot;)</span><br><span class="line">    private void point()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;point()&quot;)//参数为方法名</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;point()&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        logger.info(&quot;方法执行完毕使用了&quot;+(endTime-startTime)+&quot;ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AOP-实现-LogBack-打印请求信息与返回结果">AOP 实现 LogBack 打印请求信息与返回结果</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 从请求上下文中 得到 Request</span><br><span class="line"> */</span><br><span class="line">ServletRequestAttributes attributes =(ServletRequestAttributes)RequestContextHolder.getRequestAttributes();</span><br><span class="line">HttpServletRequest request = attributes.getRequest();</span><br></pre></td></tr></table></figure>
<p><strong>JoinPoint类</strong><br>
<em>Aspect(AOP)所属类 ，用于访问连接点细节</em></p>
<p><code>java.lang.Object[] getArgs()</code>：获取连接点方法运行时的入参列表；</p>
<p><code>Signature getSignature()</code>：获取连接点的方法签名对象；</p>
<p><code>java.lang.Object getTarget()</code> ：获取连接点所在的目标对象；</p>
<p><code>java.lang.Object getThis()</code> ：获取代理对象本身；</p>
<p><strong>@AfterReturning</strong></p>
<p><code>@AfterReturning(returning = &quot;object&quot;,pointcut = &quot;point()&quot;)</code><br>
定义在方法上，所标注的内容在方法之后执行，通过此注解可获得方法执行完毕之后的返回值。其中<code>returning = &quot;object&quot;</code>作为返回对象实体，<code>pointcut = &quot;point()&quot;</code>作为设置方法切面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by gf on 2018/10/17.</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LoginAspect &#123;</span><br><span class="line"></span><br><span class="line">    long startTime;</span><br><span class="line">    long endTime;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(LoginAspect.class);</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(public * com.example.demo.controller.StudentController.*(..))&quot;)</span><br><span class="line">    private void point()&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Before(&quot;point()&quot;)//参数为方法名</span><br><span class="line">    public void doBefore(JoinPoint joinPoint)&#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        //url</span><br><span class="line">        logger.info(&quot;url=&#123;&#125;&quot;,request.getRequestURL());</span><br><span class="line">        //ip</span><br><span class="line">        logger.info(&quot;ip=&#123;&#125;&quot;,request.getRemoteAddr());</span><br><span class="line">        //method</span><br><span class="line">        logger.info(&quot;method=&#123;&#125;&quot;,request.getMethod());</span><br><span class="line">        //class_method</span><br><span class="line">        logger.info(&quot;class_method=&#123;&#125;&quot;,joinPoint.getSignature().getDeclaringTypeName()+&quot;.&quot;+</span><br><span class="line">                    joinPoint.getSignature().getName());</span><br><span class="line">        //arg</span><br><span class="line">        logger.info(&quot;arg=&#123;&#125;&quot;,joinPoint.getArgs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;point()&quot;)</span><br><span class="line">    public void doAfter()&#123;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        float var = (float) ((endTime - startTime) / 1000.0);</span><br><span class="line">        logger.info(&quot;方法执行完毕使用了&quot;+ var +&quot;ms&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @AfterReturning(returning = &quot;object&quot;,pointcut = &quot;point()&quot;)</span><br><span class="line">    public void doAfterReturning(Object object)&#123;</span><br><span class="line">        logger.info(object.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="主键生成UUID-Spring-Data-Jpa">主键生成UUID(Spring-Data-Jpa)</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Id</span><br><span class="line">@GeneratedValue(generator = &quot;system-uuid&quot;)</span><br><span class="line">@GenericGenerator(name = &quot;system-uuid&quot;,strategy = &quot;uuid&quot;)</span><br><span class="line">private String id;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Gradle的一些常用命令</title>
    <url>/2021/05/09/Gradle%20%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>笔者之前在掘金上记录的一些关于Gradle的常用命令</p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$ gradle init --type pom</code></td>
<td>Maven项目转换Gradle(在需要转换的根目录下执行此命令)</td>
</tr>
<tr>
<td><code>$ gradle init --type java-application</code></td>
<td>创建一个gradle Demo的项目</td>
</tr>
<tr>
<td><code>$ gradle idea</code></td>
<td>根据build.gradle和setting.gradle文件生成idea项目</td>
</tr>
<tr>
<td><code>$ gradle tasks --all</code></td>
<td>查看此项目有哪些任务如上，但上面的命令只能看到有group的，如果查看全部的任务需要使用参数all</td>
</tr>
<tr>
<td><code>$ gradle build</code></td>
<td>构建并单元测试</td>
</tr>
<tr>
<td><code>$ gradle build -x test</code></td>
<td>gradle 跳过测试直接编译</td>
</tr>
<tr>
<td><code>$ gradle test</code></td>
<td>执行单元测试</td>
</tr>
<tr>
<td><code>$ gradle run</code></td>
<td>运行</td>
</tr>
<tr>
<td><code>$ gradle clean</code></td>
<td>删除build目录</td>
</tr>
<tr>
<td><code>$ gradle jar</code></td>
<td>打jar包</td>
</tr>
<tr>
<td><code>$ gradle clean war</code></td>
<td>打war包</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 安装过程</title>
    <url>/2021/05/09/IntelliJ%20IDEA%20%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a4e43bb2e30b2f2a045af458ab0ea68f2e71ff7eb8832318bcfbe3b03fecf619"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">密码提示：博主的QQ</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA常用快捷键</title>
    <url>/2021/05/08/IntelliJ%20IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="设置">设置</h2>
<p>智能友好提示导入类</p>
<p><code>Settings——&gt;Editor——&gt;General——&gt;Auto Import——&gt; [√] Add unambiguous imports on the fly</code></p>
<span id="more"></span>
<h2 id="快捷键">快捷键</h2>
<ul>
<li>mac版</li>
</ul>
<table>
<thead>
<tr>
<th>键位</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>command/⌘ + shift/⏏︎ + A</code></td>
<td>搜索帮助 	   (Help)</td>
</tr>
<tr>
<td><code>shift/⏏︎ + shift/⏏︎</code></td>
<td>万能搜索</td>
</tr>
<tr>
<td><code>command/⌘ + shift/⏏︎ + T</code></td>
<td>创建单元测试</td>
</tr>
<tr>
<td><code>command/⌘ + option/⌥ + T</code></td>
<td>包裹代码至特定代码块,(try/catch)</td>
</tr>
<tr>
<td><code>command/⌘ + option/⌥ + M</code></td>
<td>提取方法(Extract Method)</td>
</tr>
<tr>
<td><code>command/⌘ + shift/⏏︎ + R</code></td>
<td>全局搜索项目中的类</td>
</tr>
<tr>
<td><code>command/⌘ + option/⌥ + L</code></td>
<td>一键格式化代码</td>
</tr>
<tr>
<td><code>command/⌘ + shift/⏏︎ + ↑/↓</code></td>
<td>上下移动选中的代码</td>
</tr>
<tr>
<td><code>command/⌘ + shift/⏏︎ + U</code></td>
<td>大小写格式化选中的代码</td>
</tr>
<tr>
<td><code>command/⌘ + 左边栏代号</code></td>
<td>跳入对应工作区</td>
</tr>
<tr>
<td><code>command/⌘ + [</code></td>
<td>上一个windows窗口</td>
</tr>
<tr>
<td><code>command/⌘ + ]</code></td>
<td>下一个windows窗口</td>
</tr>
<tr>
<td><code>command/⌘ + E</code></td>
<td>最近使用的文件 (Recent files)</td>
</tr>
<tr>
<td><code>ESC</code></td>
<td>跳入代码区</td>
</tr>
<tr>
<td><code>fn + F3</code></td>
<td>为代码标记(取消)书签</td>
</tr>
<tr>
<td><code>option/⌥ + fn + F3</code></td>
<td>为代码标记(取消)带编号书签 , 通过 <code>control/⌃</code> + 编号 进行跳转</td>
</tr>
</tbody>
</table>
<ul>
<li>win版</li>
</ul>
<table>
<thead>
<tr>
<th>键位</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Ctrl + Shift + A</code></td>
<td>搜索帮助 	   (Help)</td>
</tr>
<tr>
<td><code>Shift + Shift</code></td>
<td>万能搜索</td>
</tr>
<tr>
<td><code>Ctrl + H</code></td>
<td>全局搜索字符串 find in path</td>
</tr>
<tr>
<td><code>Ctrl + Shift + T</code></td>
<td>全局搜索引入Jar包的类</td>
</tr>
<tr>
<td><code>Ctrl + Shift + R</code></td>
<td>全局搜索项目中的类</td>
</tr>
<tr>
<td><code>Ctrl + O</code></td>
<td>搜索方法</td>
</tr>
<tr>
<td><code>Ctrl + Alt + Shift + F11</code></td>
<td>全局搜索属性/方法</td>
</tr>
<tr>
<td><code>Ctrl + Shift + I</code></td>
<td>小窗口显示类细节</td>
</tr>
<tr>
<td><code>Ctrl + Alt + L</code></td>
<td>一键格式化代码</td>
</tr>
<tr>
<td><code>Ctrl + Shift + ↑/↓</code></td>
<td>当前类方法跳转 ↑ 上一个  ↓ 下一个</td>
</tr>
<tr>
<td><code>Ctrl + Alt + T</code></td>
<td>包裹代码至特定代码块,(try/catch)</td>
</tr>
<tr>
<td><code>Ctrl + U</code></td>
<td>DeBug调试查看计算表达式</td>
</tr>
<tr>
<td><code>Ctrl + T</code></td>
<td>快速查看继承结构</td>
</tr>
<tr>
<td><code>ESC</code></td>
<td>跳入代码区</td>
</tr>
<tr>
<td><code>Alt + 左边栏代号</code></td>
<td>跳入对应工作区</td>
</tr>
<tr>
<td><code>Ctrl + Alt + ]</code></td>
<td>下一个windows窗口</td>
</tr>
<tr>
<td><code>Ctrl + Alt + [</code></td>
<td>上一个windows窗口</td>
</tr>
<tr>
<td><code>Ctrl + E</code></td>
<td>最近使用的文件 (Recent files)</td>
</tr>
<tr>
<td><code>Ctrl + Shift + E</code></td>
<td>最近更改的文件 (Recent changed files)</td>
</tr>
<tr>
<td><code>Ctrl + Q</code></td>
<td>跳转到上一次编辑的代码处</td>
</tr>
<tr>
<td><code>Alt + 左箭头</code></td>
<td>跳转到上一次浏览的代码处</td>
</tr>
<tr>
<td><code>Alt + 右箭头</code></td>
<td>跳转到下一次浏览的代码处</td>
</tr>
<tr>
<td><code>Ctrl + Shift + F11</code></td>
<td>为代码标记(取消)书签</td>
</tr>
<tr>
<td><code>Ctrl + Shift + Alt + F11</code></td>
<td>为代码标记(取消)带编号书签 , 通过 Ctrl + 编号 进行跳转</td>
</tr>
<tr>
<td><code>Alt+Shift+M</code></td>
<td>重复代码快速重构</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 窗口函数</title>
    <url>/2021/05/26/MySQL-%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="一-窗口函数有什么用？">一.窗口函数有什么用？</h3>
<p>在日常工作中，经常会遇到需要在每组内排名，比如下面的业务需求：</p>
<ul>
<li>排名问题：每个部门按业绩来排名</li>
<li>topN问题：找出每个部门排名前N的员工进行奖励</li>
</ul>
<p>面对这类需求，就需要使用sql的高级功能窗口函数了。</p>
<span id="more"></span>
<h3 id="二-什么是窗口函数？">二.什么是窗口函数？</h3>
<p>窗口函数，也叫OLAP函数（Online Anallytical Processing，联机分析处理），可以对数据库数据进行实时分析处理。</p>
<p>窗口函数的基本语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;窗口函数&gt; over (partition by &lt;用于分组的列名&gt; order by &lt;用于排序的列名&gt;)</span><br></pre></td></tr></table></figure>
<p>那么语法中的&lt;窗口函数&gt;都有哪些呢？</p>
<p><code>&lt;窗口函数&gt;</code> 的位置，可以放以下两种函数：</p>
<ul>
<li>
<p>专用窗口函数，包括后面要讲到的<code>rank</code>, <code>dense_rank</code>, <code>row_number</code> 等专用窗口函数。</p>
</li>
<li>
<p>聚合函数，如<code>sum</code>, <code>avg</code>, <code>count</code>, <code>max</code>, <code>min</code> 等</p>
</li>
</ul>
<p>因为窗口函数是对where或者group by子句处理后的结果进行操作，所以窗口函数原则上只能写在select子句中。</p>
<h3 id="三-如何使用？">三.如何使用？</h3>
<p>接下来，就结合实例，给大家介绍几种窗口函数的用法。</p>
<h4 id="专用窗口函数rank">专用窗口函数<code>rank</code></h4>
<p>例如下图，是班级表中的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526013546.png" alt=""></p>
<p>如果我们想在每个班级内按成绩排名，得到下面的结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526013642.jpeg" alt=""></p>
<p>以班级“1”为例，这个班级的成绩“95”排在第1位，这个班级的“83”排在第4位。上面这个结果确实按我们的要求在每个班级内，按成绩排名了。</p>
<p>得到上面结果的sql语句代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *,</span><br><span class="line">   rank() over (partition by 班级</span><br><span class="line">                 order by 成绩 desc) as ranking</span><br><span class="line">from 班级表</span><br></pre></td></tr></table></figure>
<p>我们来解释下这个sql语句里的 <code>select子句</code> 。 <code>rank</code> 是排序的函数。要求是“每个班级内按成绩排名”，这句话可以分为两部分：</p>
<ol>
<li>每个班级内：按班级分组</li>
</ol>
<p><code>partition by</code> 用来对表分组。在这个例子中，所以我们指定了按“班级”分组（<code>partition by 班级</code>）</p>
<ol start="2">
<li>按成绩排名</li>
</ol>
<p><code>order by</code> 子句的功能是对分组后的结果进行排序，默认是按照升序（<code>asc</code>）排列。在本例中（<code>order by 成绩 desc</code>）是按成绩这一列排序，加了desc关键词表示降序排列。</p>
<p>通过下图，我们就可以理解<code>partiition by</code>（分组）和<code>order by</code>（在组内排序）的作用了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526014100.jpeg" alt=""></p>
<p>窗口函数具备了我们之前学过的<code>group by</code>子句分组的功能和<code>order by</code>子句排序的功能。那么，为什么还要用窗口函数呢？</p>
<p>这是因为，<code>group by</code>分组汇总后改变了表的行数，一行只有一个类别。而<code>partiition by</code>和<code>rank</code>函数不会减少原表中的行数。例如下面统计每个班级的人数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526014228.jpeg" alt=""></p>
<p>相信通过这个例子，你已经明白了这个窗口函数的使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *,</span><br><span class="line">   rank() over (partition by 班级</span><br><span class="line">                 order by 成绩 desc) as ranking</span><br><span class="line">from 班级表</span><br></pre></td></tr></table></figure>
<p>现在我们说回来，为什么叫“窗口”函数呢？这是因为partition by分组后的结果称为“窗口”，这里的窗口不是我们家里的门窗，而是表示“范围”的意思。</p>
<p>** 简单来说，窗口函数有以下功能：**</p>
<ul>
<li>
<p>同时具有分组和排序的功能</p>
</li>
<li>
<p>不减少原表的行数</p>
</li>
</ul>
<p>语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;窗口函数&gt; over (partition by &lt;用于分组的列名&gt;</span><br><span class="line">                order by &lt;用于排序的列名&gt;)</span><br></pre></td></tr></table></figure>
<h4 id="其他专业窗口函数">其他专业窗口函数</h4>
<p>专用窗口函数 <code>rank</code>, <code>dense_rank</code>, <code>row_number</code> 有什么区别呢？</p>
<p>它们的区别我举个例子，你们一下就能看懂：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *,</span><br><span class="line">   rank() over (order by 成绩 desc) as ranking,</span><br><span class="line">   dense_rank() over (order by 成绩 desc) as dese_rank,</span><br><span class="line">   row_number() over (order by 成绩 desc) as row_num</span><br><span class="line">from 班级表</span><br></pre></td></tr></table></figure>
<p>得到结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526014556.png" alt=""></p>
<p>从上面的结果可以看出：</p>
<p><code>rank</code> 函数：这个例子中是5位，5位，5位，8位，也就是如果有并列名次的行，会占用下一名次的位置。比如正常排名是1，2，3，4，但是现在前3名是并列的名次，结果是：1，1，1，4。</p>
<p><code>dense_rank</code> 函数：这个例子中是5位，5位，5位，6位，也就是如果有并列名次的行，不占用下一名次的位置。比如正常排名是1，2，3，4，但是现在前3名是并列的名次，结果是：1，1，1，2。</p>
<p><code>row_number</code> 函数：这个例子中是5位，6位，7位，8位，也就是不考虑并列名次的情况。比如前3名是并列的名次，排名是正常的1，2，3，4。</p>
<p>这三个函数的区别如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526014717.png" alt=""></p>
<p>最后，需要强调的一点是：在上述的这三个专用窗口函数中，函数后面的括号不需要任何参数，保持()空着就可以。</p>
<p>现在，大家对窗口函数有一个基本了解了吗？</p>
<h4 id="聚合函数作为窗口函数">聚合函数作为窗口函数</h4>
<p>聚和窗口函数和上面提到的专用窗口函数用法完全相同，只需要把聚合函数写在窗口函数的位置即可，但是函数后面括号里面不能为空，需要指定聚合的列名。</p>
<p>我们来看一下窗口函数是聚合函数时，会出来什么结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *,</span><br><span class="line">   sum(成绩) over (order by 学号) as current_sum,</span><br><span class="line">   avg(成绩) over (order by 学号) as current_avg,</span><br><span class="line">   count(成绩) over (order by 学号) as current_count,</span><br><span class="line">   max(成绩) over (order by 学号) as current_max,</span><br><span class="line">   min(成绩) over (order by 学号) as current_min</span><br><span class="line">from 班级表</span><br></pre></td></tr></table></figure>
<p>得到结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526014828.jpeg" alt=""></p>
<p>有发现什么吗？我单独用sum举个例子：</p>
<p>如上图，聚合函数 <code>sum</code> 在窗口函数中，是对自身记录、及位于自身记录以上的数据进行求和的结果。比如0004号，在使用 <code>sum</code> 窗口函数后的结果，是对0001，0002，0003，0004号的成绩求和，若是0005号，则结果是0001号~0005号成绩的求和，以此类推。</p>
<p>不仅是 <code>sum</code> 求和，平均、计数、最大最小值，也是同理，都是针对自身记录、以及自身记录之上的所有数据进行计算，现在再结合刚才得到的结果（下图），是不是理解起来容易多了？</p>
<p>比如0005号后面的聚合窗口函数结果是：学号0001~0005五人成绩的总和、平均、计数及最大最小值。</p>
<p>如果想要知道所有人成绩的总和、平均等聚合结果，看最后一行即可。</p>
<p><strong>这样使用窗口函数有什么用呢？</strong></p>
<p>聚合函数作为窗口函数，可以在每一行的数据里直观的看到，截止到本行数据，统计数据是多少（最大值、最小值等）。同时可以看出每一行数据，对整体统计数据的影响。</p>
<h3 id="四-注意事项">四.注意事项</h3>
<p><code>partition</code> 子句可以省略，省略就是不指定分组，结果如下，只是按成绩由高到低进行了排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select *,</span><br><span class="line">   rank() over (order by 成绩 desc) as ranking</span><br><span class="line">from 班级表</span><br></pre></td></tr></table></figure>
<p>得到结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210526015107.jpeg" alt=""></p>
<p>但是，这就失去了窗口函数的功能，所以一般不要这么使用。</p>
<h3 id="五-总结">五.总结</h3>
<h4 id="窗口函数语法">窗口函数语法</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;窗口函数&gt; over (partition by &lt;用于分组的列名&gt;</span><br><span class="line">                order by &lt;用于排序的列名&gt;)</span><br><span class="line">&lt;窗口函数&gt;的位置，可以放以下两种函数：</span><br></pre></td></tr></table></figure>
<ol>
<li>专用窗口函数，比如rank,dense_rank,row_number等</li>
<li>聚合函数，如sum. avg, count,max, min等</li>
</ol>
<h4 id="窗口函数有以下功能：">窗口函数有以下功能：</h4>
<ol>
<li>
<p>同时具有分组（partition by）和排序（order by）的功能</p>
</li>
<li>
<p>不减少原表的行数，所以经常用来在每组内排名</p>
</li>
</ol>
<h4 id="注意事项">注意事项</h4>
<p><strong>窗口函数原则上只能写在select子句中</strong></p>
<h4 id="窗口函数使用场景">窗口函数使用场景</h4>
<ul>
<li>业务需求“在每组内排名”，比如：</li>
</ul>
<p>排名问题：每个部门按业绩来排名<br>
topN问题：找出每个部门排名前N的员工进行奖励</p>
<h5 id="实例">实例</h5>
<p><strong>184.部门工资最高的员工</strong></p>
<p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Jim   | 90000  | 1            |</span><br><span class="line">| 3  | Henry | 80000  | 2            |</span><br><span class="line">| 4  | Sam   | 60000  | 2            |</span><br><span class="line">| 5  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure>
<p><code>Department</code> 表包含公司所有部门的信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure>
<p>编写一个 SQL 查询，找出每个部门工资最高的员工。对于上述表，您的 SQL 查询应返回以下行（行的顺序无关紧要）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Jim      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure>
<p><strong>解释：</strong></p>
<blockquote>
<p>Max 和 Jim 在 IT 部门的工资都是最高的，Henry 在销售部的工资最高</p>
</blockquote>
<h5 id="题解">题解</h5>
<p>经典topN问题：每组最大的N条记录。这类问题涉及到“既要分组，又要排序”的情况，要能想到用窗口函数来实现。</p>
<h5 id="代码">代码</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select DepartmentId,Name,Salary</span><br><span class="line">from (</span><br><span class="line">   select *, </span><br><span class="line">          dense_rank() over (partition by DepartmentId</span><br><span class="line">                       order by Salary desc) as ranking</span><br><span class="line">   from Employee) as a</span><br><span class="line">where ranking &lt;= 3;</span><br></pre></td></tr></table></figure>
<p>本文系转载<br>
原文链接：<a href="https://www.cnblogs.com/hugoyu/p/14008012.html">https://www.cnblogs.com/hugoyu/p/14008012.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot &amp; Mybatis 搭建迷你小程序（一）</title>
    <url>/2021/05/19/SpringBoot-Mybatis-%E6%90%AD%E5%BB%BA%E8%BF%B7%E4%BD%A0%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>SpringBoot &amp; Mybatis &amp; MybatisGenerator plugin</p>
<ul>
<li>pom.xml</li>
</ul>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">		 xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">	&lt;groupId&gt;com.ocean&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springboot-mybatis-demo&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">	&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">	&lt;name&gt;springboot-mybatis-demo&lt;/name&gt;</span><br><span class="line">	&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">	&lt;parent&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">		&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">	&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">	&lt;properties&gt;</span><br><span class="line">		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">		&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">	&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">	&lt;dependencies&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;5.1.6&lt;/version&gt;</span><br><span class="line">			&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">			&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;5.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jackson-datatype-joda&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">		&lt;dependency&gt;</span><br><span class="line">			&lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">		&lt;/dependency&gt;</span><br><span class="line">	&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">	&lt;build&gt;</span><br><span class="line">		&lt;plugins&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">			&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">				&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">				&lt;configuration&gt;</span><br><span class="line">					&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">					&lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">				&lt;/configuration&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">			&lt;!-- maven的核心插件之-complier插件默认只支持编译Java 1.4，因此需要加上支持高版本jre的配置，在pom.xml里面加上 增加编译插件 --&gt;</span><br><span class="line">			&lt;plugin&gt;</span><br><span class="line">				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">				&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">				&lt;configuration&gt;</span><br><span class="line">					&lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">					&lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">					&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">					&lt;compilerArguments&gt;</span><br><span class="line">						&lt;extdirs&gt;$&#123;project.basedir&#125;/src/main/resources/lib&lt;/extdirs&gt;</span><br><span class="line">					&lt;/compilerArguments&gt;</span><br><span class="line">				&lt;/configuration&gt;</span><br><span class="line">			&lt;/plugin&gt;</span><br><span class="line">		&lt;/plugins&gt;</span><br><span class="line">	&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>generatorConfig.xml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span><br><span class="line">    &lt;classPathEntry</span><br><span class="line">            location=&quot;E:\\developer\\mybatis-generator-core-1.3.2\\lib\\mysql-connector-java-5.1.39.jar&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;DBTables&quot;  targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库链接URL，用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">                driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/demo&quot;</span><br><span class="line">                userId=&quot;root&quot;</span><br><span class="line">                password=&quot;root&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        &lt;!-- 生成模型的包名和位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator</span><br><span class="line">                targetPackage=&quot;com.oecoo.demo.pojo&quot;</span><br><span class="line">                targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span><br><span class="line">            &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- 生成映射文件的包名和位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator</span><br><span class="line">                targetPackage=&quot;mapper&quot;</span><br><span class="line">                targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- 生成DAO的包名和位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator</span><br><span class="line">                type=&quot;XMLMAPPER&quot;</span><br><span class="line">                targetPackage=&quot;com.oecoo.demo.dao&quot;</span><br><span class="line">                targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br><span class="line">        &lt;table tableName=&quot;t_user&quot;</span><br><span class="line">               domainObjectName=&quot;User&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot;</span><br><span class="line">               enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot;</span><br><span class="line">               enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>application.yml</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        name: test</span><br><span class="line">        url: jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</span><br><span class="line">        username: root</span><br><span class="line">        password: root</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        #配置初始化大小/最小/最大</span><br><span class="line">        initial-size: 1</span><br><span class="line">        min-idle: 1</span><br><span class="line">        max-active: 20</span><br><span class="line">        #获取连接等待超时时间</span><br><span class="line">        max-wait: 60000</span><br><span class="line">        #间隔多久进行一次检测，检测需要关闭的空闲连接</span><br><span class="line">        time-between-eviction-runs-millis: 60000</span><br><span class="line">        #一个连接在池中最小生存的时间</span><br><span class="line">        min-evictable-idle-time-millis: 300000</span><br><span class="line">        validation-query: SELECT &#x27;x&#x27;</span><br><span class="line">        test-while-idle: true</span><br><span class="line">        test-on-borrow: false</span><br><span class="line">        test-on-return: false</span><br><span class="line">        #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false</span><br><span class="line">        pool-prepared-statements: false</span><br><span class="line">        max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line"></span><br><span class="line">#MyBatis配置</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath*:mapper/*Mapper.xml</span><br><span class="line">  type-aliases-package: com.oecoo.demo.pojo</span><br></pre></td></tr></table></figure>
<ul>
<li>Spring-Boot 启动类</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.oecoo.demo;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.oecoo.demo.dao&quot;)</span><br><span class="line">public class BootApplication &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(BootApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>SpringBoot -单元测试</title>
    <url>/2021/05/19/SpringBoot-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>SpringBoot的单元测试是基于JUnit</p>
<span id="more"></span>
<h3 id="测试Service">测试Service</h3>
<ul>
<li>
<p><code>@RunWith(SpringRunner.class)</code> ：标注当前类为Spring的测试运行器</p>
</li>
<li>
<p><code>@SpringBootTest</code> ：标注当前类为SpringBoot测试类的主类，用于启动springBoot中的Tomcat</p>
</li>
<li>
<p><code>@Test</code> ：标注的方法为一个测试方法</p>
</li>
<li>
<p><code>Assert</code> 类 ：断言，包含了一组静态的测试方法，用户验证期望值</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class StudentServiceImplTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentService studentService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testFindByAge() throws Exception &#123;</span><br><span class="line">        ServerResponse&lt;List&lt;Student&gt;&gt; serverResponseObj = studentService.findByAge(22);</span><br><span class="line">        List&lt;Student&gt; obj = serverResponseObj.getData();</span><br><span class="line">        Student stu = null;</span><br><span class="line">        for (int i=0;i&lt;obj.size();i++) &#123;</span><br><span class="line">            stu = obj.get(0);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.assertEquals(&quot;Tom&quot;,stu.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试API">测试API</h3>
<ul>
<li>
<p><code>@AutoConfigureMockMvc</code> ：注入一个MockMvc实例</p>
</li>
<li>
<p><code>@WebAppConfiguration</code> ：测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">@AutoConfigureMockMvc</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">public class StudentControllerTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MockMvc mvc;</span><br><span class="line"></span><br><span class="line">	//应用程序上下文</span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext context;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setupMockMvc() throws Exception &#123;</span><br><span class="line">        mvc = MockMvcBuilders.webAppContextSetup(context).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGetList() throws Exception &#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(&quot;/student/list&quot;))   //模拟客户端get请求</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())  //状态码</span><br><span class="line">        .andExpect(MockMvcResultMatchers.content().string(&quot;asb&quot;)); //验证期望值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>IDEA 单元测试小技巧</li>
</ul>
<p>点击到方法上面 ——&gt;右击选择Go To ——&gt;选择Test</p>
<p><code>mvn clean package</code> 项目打包时，会自动进行一次单元测试</p>
<p><code>mvn clean package -Dmaven.test.skip=true</code> 跳过单元测试</p>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC -@ModelAttribute</title>
    <url>/2021/05/19/SpringMVC-ModelAttribute/</url>
    <content><![CDATA[<ul>
<li><strong>标注在方法上</strong></li>
</ul>
<p>使用@ModelAttribute 注解的方法会<strong>优先于@RequestMapping注解的方法执行</strong>，如果有多个方法用了@ModelAttribute标记，则会根据标记顺序依次执行。</p>
<span id="more"></span>
<ul>
<li><strong>标注在参数上</strong></li>
</ul>
<p>在参数上加上<code>@ModelAttribute</code>注解可以<strong>在模型中创建一个对象</strong>。<br>
此时在Controller类中若存在<code>@ModelAttribute</code>标注的非<code>@RequestMapping</code>方法，那么这个形参会与 @ModelAttribute标注的方法通过value形成映射关系。<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143f1ea0d0558f?w=1000&amp;h=586&amp;f=png&amp;s=299958" alt="image.png"></p>
<ul>
<li><strong>标注在<code>@RequestMapping</code>注解请求方法上</strong></li>
</ul>
<p>用<code>@ModelAttribute</code>+<code>@RequestMapping</code>方法的场景很少会用到，因为这种场景下的返回值就不是视图了而是ModelAttribute的value值，如果不是视图，那么<code>@RequestMapping</code>注解的方法也失去了本身的含义。</p>
]]></content>
  </entry>
  <entry>
    <title>VMware- VMware workstation 与 VMware Vsphere client 虚拟机 v2v</title>
    <url>/2021/05/11/VMware-VMware-workstation-%E4%B8%8E-VMware-Vsphere-client-%E8%99%9A%E6%8B%9F%E6%9C%BA-v2v/</url>
    <content><![CDATA[<p>这几日一直在忙甲方权限系统对接的工作，遇到了很多和环境配置相关的坑，已经连续半个月没有全身心的投入敲代码的感觉中了，一天不敲，确实感觉到了自己的退步。今日在学习群里看到技术大佬们都很努力的在学习。之前早有耳闻简书的大名。今日开此账号，也来记录一下自己学习的点点滴滴。</p>
<span id="more"></span>       
<p>话不多说。进入正题。今天遇到的问题是：</p>
<h2 id="VMware-workstation-导出的vmdk文件无法在-VMware-Vsphere-client-建立清单">VMware workstation 导出的vmdk文件无法在  VMware Vsphere client 建立清单</h2>
<p>问题产生原因 ：</p>
<ul>
<li>vmware workstation 常用于 IT从业者、个人在个人计算机上面搭建虚拟机 学习爱好之用。</li>
<li>vmware Vsphere client 则是常用于 企业级 在一台物理服务器上搭建多台虚拟机 工作开发之用。</li>
</ul>
<p>两者虽都是搭建虚拟机软件，但是侧重点不同。但这只是针对它们各自的作用来说的，导致无法将甲方提供的虚拟机（.vmdk）安装成功的原因是因为两款软件的配置和系统兼容性的不同。</p>
<h2 id="VMware-converter">VMware converter</h2>
<p>这是一个神器，这是一个神器，这是一个神器！！<br>
重要的事情说三遍，这个软件是vmware免费软件，注册个账号就可以下载。<br>
开始我以为这个机器只能把物理机转化为虚拟机，后来发现它啥都能行。</p>
<p>点击convert machine按钮<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c60824a55ef?w=907&amp;h=715&amp;f=png&amp;s=78603" alt=""><br>
首先选择要转化的源系统是什么。</p>
<p>powered on下面有三种选择：<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c758b7de488?w=553&amp;h=243&amp;f=png&amp;s=9213" alt=""><br>
看到下拉箭头下面那行字了吗？</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c7c4ca66f69?w=527&amp;h=135&amp;f=png&amp;s=7196" alt=""><br>
如果你和我一样迁移的是linux虚拟机，选择第二种就行了。<br>
但我的虚拟机当时关闭了，所以我选的是powered off.<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c80f50b813b?w=592&amp;h=275&amp;f=png&amp;s=12201" alt=""><br>
第二行选择正是我需要的，然后<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c86c1962e2f?w=598&amp;h=251&amp;f=png&amp;s=11660" alt=""><br>
选择文件，.vmk格式的文件。注意，文件名不能有中文，会报错！！！<br>
然后下一步，选择目的地址<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c8acbbd4a7c?w=750&amp;h=272&amp;f=png&amp;s=14344" alt=""><br>
再然后就是选择存储的位置，网络位置等等。无需改动，除非你有特殊需求，在这里就不一一介绍了。<br>
最后，成功！！！<br>
<img src="https://user-gold-cdn.xitu.io/2020/4/4/17143c8e0730c333?w=731&amp;h=195&amp;f=png&amp;s=32455" alt=""><br>
再次，回到vsphere打开刚刚新迁移过来的虚拟机，可爱的桌面就出现了，完美解决！！！</p>
<p>转自：<a href="https://www.cnblogs.com/cuncunjun/p/6663687.html">https://www.cnblogs.com/cuncunjun/p/6663687.html</a></p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>i++ 的线程安全问题</title>
    <url>/2021/05/11/i-%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>① 方法一<br>
使用 <code>AtomicXX</code> 系列的包装类</li>
</ul>
<span id="more"></span>
<ul>
<li>
<p>② 方法二<br>
使用 <code>synchronized</code> 针对 i 的 写操作进行加锁</p>
</li>
<li>
<p>③ 方法三<br>
使用无锁编程 CAS 的方式</p>
</li>
</ul>
<p>注：<code>volatile</code> 解决了线程间共享变量的可见性问题，使用 <code>volatile</code> 会增加性能开销，<code>volatile</code> 并不能解决线程同步问题。</p>
<p>加锁的同时也会增加性能开销。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下 cat grep快速查找内容</title>
    <url>/2021/05/14/linux%E4%B8%8B-cat-grep%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>部署在Linux下的程序，日志很多，而且实时滚动，可以通过以下方式快速查找自己自己想要的内容：</p>
<p>cat log.txt | grep ‘ERROR’ -A 5</p>
<span id="more"></span>
<p>意思是，在log.txt文件中，查找ERROR字符，并显示ERROR所在行的之后5行</p>
<p>cat log.txt | grep ‘ERROR’ -B 5  之前5行</p>
<p>cat log.txt | grep ‘ERROR’ -C 5 前后5行</p>
<p>cat log.txt | grep -v ‘ERROR’ 排除ERROR所在的行</p>
]]></content>
      <categories>
        <category>运维-命令</category>
      </categories>
      <tags>
        <tag>运维-命令</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，2021 | 博客迁移记录</title>
    <url>/2021/05/10/%E4%BD%A0%E5%A5%BD%EF%BC%8C2021-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>一直在考虑建立属于自己的博客网站，用于记录工作和生活，如今得偿所愿。也幸好在其他平台上记录了些琐碎经历，故本文记录一下掘金博文迁移记录～</p>
<span id="more"></span>
<ul>
<li>/2021/05/11/i-的线程安全问题</li>
<li>/2021/05/11/VMware-VMware-workstation-与-VMware-Vsphere-client-虚拟机-v2v</li>
<li>/2021/05/11/实体类生成UUID主键</li>
<li>/2021/05/11/浅谈-DevOps</li>
<li>/2021/05/09/判断dll是32位还是64位的简单方法（实测有效）</li>
<li>/2021/05/09/Gradle 的一些常用命令</li>
<li>/2021/05/09/IntelliJ IDEA 安装过程</li>
<li>/2021/05/08/IntelliJ IDEA常用快捷键</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>判断dll是32位还是64位的简单方法（实测有效）</title>
    <url>/2021/05/09/%E5%88%A4%E6%96%ADdll%E6%98%AF32%E4%BD%8D%E8%BF%98%E6%98%AF64%E4%BD%8D%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95%EF%BC%88%E5%AE%9E%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
    <content><![CDATA[<p><strong>简便方法：</strong></p>
<p>直接用记事本或者notepad++打开exe文件（dll文件），会有很多乱码，不要头疼，接下来只需要在第二段中找到PE两个字母，在其后的不远出会出现d? 或者L。若是d，则证明该程序是64位；若是L，则证明是32位。</p>
<span id="more"></span>
<p><img src="https://i.loli.net/2021/05/10/j3OEvpbdJ5DMFeG.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>实体类生成UUID主键</title>
    <url>/2021/05/11/%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%94%9F%E6%88%90UUID%E4%B8%BB%E9%94%AE/</url>
    <content><![CDATA[<p>实体类生成UUID主键</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Gril &#123;</span><br><span class="line"> </span><br><span class="line">    @Id @GeneratedValue(generator=&quot;system-uuid&quot;)</span><br><span class="line">    @GenericGenerator(name=&quot;system-uuid&quot;, strategy = &quot;uuid&quot;)</span><br><span class="line">    private String id;</span><br><span class="line">    //省略 ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>投资方向规划</title>
    <url>/2021/05/10/%E6%8A%95%E8%B5%84%E6%96%B9%E5%90%91%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a384b54db6e136db1643227345eeb94420cea15cc365c88ce03421c7ab1ed5f4">f4aa9fb63d4e7fe32bfec9616c4c290016c9db424d11e2915a67b70de96af50e34a3b554139b01a88d4dc9e3586f2b75a97e9fc0a07ccad1db357b460e9df6534d600b7488b18a24ac371a3e4da48aefc2418072e262bd9ae27f23e1afcb41fe8119a970da4b69efde7b7784a76ef98013ede4d3f48ea7053014bcfe59d2b38078688abaa6bb00380519d4d5f98f8efcfaa9245afb18f1c78db313c213c56b124c1f4c331ce56b1b03c3f038ac9d8881e249a2cf92a83ddbc8cf54ccf084b6e25c458e86f68b5808b8c9bc8e4f896a10cdf6251b442f1505cf96e1a2209ee192ce8a8f21592264fbeccde91e26946e536ef048c9ffc2ad0f4610896d41d629e95d6415858dcade26d0333c733ae234f50165f06eae664d2be34214719dc18d5e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">本篇为加密文章，请输入密码进行查看</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 DevOps</title>
    <url>/2021/05/11/%E6%B5%85%E8%B0%88-DevOps/</url>
    <content><![CDATA[<p>听说这个词汇还是年前时候的事情 ，当时第一个反应是一种新技术的又出现了，后来经过上网查找相关的资料，大致上我认为的 <strong>DevOps</strong> 是一种 <strong>软件开发的协作关系</strong>。</p>
<span id="more"></span>
<h3 id="软件开发方式演进">软件开发方式演进</h3>
<hr>
<ul>
<li>
<p><strong>瀑布流开发</strong></p>
<p>阶段性开发，这种开发方式在政府项目中广受推崇。 按时间线阶段划分 ，在上一个人员的任务完成之后再移交给下一层的人员来进行作业。</p>
<p><code>开发  ——&gt;  测试  ——&gt;  运维  ——&gt;  运营</code></p>
<p>瀑布开发模式的缺点是<strong>限制了开发期间团队间的交互</strong>。而且整体效率并不是很快。</p>
</li>
<li>
<p><strong>敏捷开发</strong></p>
<p>敏捷开发最初并不是用在软件开发领域的，它是由上世纪八十年代的日本丰田汽车的一套企业文化演变而来</p>
<blockquote>
<p><strong>丰田精益七原则</strong></p>
<ul>
<li>① 杜绝浪费</li>
<li>② 内建质量</li>
<li>③ 创建知识（放大学习）</li>
<li>④ 延迟决策（尽量延迟决定）</li>
<li>⑤ 快速交付</li>
<li>⑥ 团队授权</li>
<li>⑦ 全局优化</li>
</ul>
</blockquote>
<p>敏捷宣言诞生于2001年的美国，它制定了在软件系统开发领域的 十二条原则 和 四大核心</p>
<blockquote>
<p><strong>四大核心</strong></p>
<ul>
<li>① 个体和互动高于流程和工具</li>
<li>② 工作的软件高于详尽的文档</li>
<li>③ 客户合作高于合同谈判</li>
<li>④ 响应变化高于遵循计划</li>
</ul>
</blockquote>
<blockquote>
<p><strong>十二条原则</strong></p>
<ul>
<li>通过早期和连续型的高价值工作交付满足 “客户”</li>
<li>大工作分成可以迅速完成的较小组成部分</li>
<li>识别最好的工作是从自我组织的团队中出现的</li>
<li>为积极员工提供他们需要的环境和支持，并相信他们可以实现完成工作</li>
<li>创建可以改善可持续工作的流程</li>
<li>维持完整工作的不变的步调</li>
<li>欢迎改变的需求，即使是在项目后期</li>
<li>在项目期间每天与项目团队和业务所有者开会</li>
<li>在定期修正期间，让团队反映如何能高效，然后进行相应的行为调整</li>
<li>通过完成的工作量计量工作进度</li>
<li>不断的追求完善</li>
<li>利用调整获得竞争优势</li>
</ul>
</blockquote>
</li>
</ul>
<p>在我看来，所谓 “敏捷开发” 更像是一种 积极向上的工作态度 ，化繁为简的工作方式 ，通过高效率的交流 ，调整工作的节奏和工作方式的协作方式。</p>
<ul>
<li>
<p><strong>DevOps</strong><br>
在整个项目过程中，每个人都是DevOps的一部分</p>
<p><code>开发 &lt;=&gt; 测试 &lt;=&gt; 运维</code></p>
<p>在看别人写的关于DevOps理解时，有人形象把其比作为 高速车道 的<strong>三条车道</strong> ，每次在本条车道提速到临界值的同时，再尝试切换到旁边的高速道Plus。</p>
</li>
<li>
<p>① <strong>保持系统运作流程不可中断，随时提升和优化工作流程</strong></p>
</li>
<li>
<p>② <strong>建立反馈机制，确保能提供持续不断的反馈循环，且这些反馈不被忽视</strong></p>
</li>
<li>
<p>③ <strong>持续不断的学习和汲取经验，不停的进步，快速的失败</strong></p>
</li>
</ul>
<p>现代软件开发的五项活动 使 DevOps 成为现实</p>
<blockquote>
<ul>
<li><strong>持续集成</strong></li>
<li><strong>持续交付</strong></li>
<li><strong>云基础架构</strong></li>
<li><strong>测试自动化</strong></li>
<li><strong>配置管理</strong></li>
</ul>
</blockquote>
<p>现在很多大型互联网产品都采用DevOps的开发方式 ，这也十分符合互联网不断迭代的业务需求，现在很火的 Docker  + K8s 就是一种DevOps的软件开发的协作关系.</p>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title>群友面经-去哪儿网一面</title>
    <url>/2021/05/19/%E7%BE%A4%E5%8F%8B%E9%9D%A2%E7%BB%8F-%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<ol>
<li>先自我介绍一下</li>
<li>介绍一下 你们的项目，项目的用户量，qps，以及项目的难点在哪儿</li>
<li>我看你用了nginx + redis + echache做了三级缓存，你们是怎么做的？存了哪些数？怎么存的？</li>
</ol>
<span id="more"></span>
<ol start="4">
<li>
<p>本地缓存存了什么数据？用的是什么东西？具体的存储方案是是什么？nginx存了什么？redis呢？</p>
</li>
<li>
<p>echache存了售电公司的基础信息，如果信息变更的话，你是怎么更新echache缓存的（本地缓存的更新方式，以及基于MQ的广播模式通知各个服务更新缓存）？套餐数据变化怎么更新redis的？如果缓存出现了不一致怎么办，就是入库的时候，先删除缓存，再更新数据库，此时来了一个请求，获取数据，然后放缓存里面，你数据库更新完，再去更新redis的时候，就出现了不一致，怎么解决？</p>
</li>
<li>
<p>你用了RocketMQ是吧？为啥要用RocketMQ？为什么选择它？（我从技术对比，高阶功能，MQ的性能优化方面答了一下）</p>
</li>
<li>
<p>你说RocketMQ的事务消息机制？它是怎么实现的？能不能回滚？（这个没答好，因为有点记不清楚了，所以面试的时候，要往自己会的方向引，我这个就是错误案例）</p>
</li>
<li>
<p>ThreadLocal了解吗？说说他的原理和组成？（答了它的作用，怎么实现的，弱引用，entryMap这些）如果一个线程内部，又开了一个线程，能不能获取到前面那个线程的ThreadLocal值？（我说不能）如果我想获取它的值，要怎么实现？（这个没答上来）</p>
</li>
<li>
<p>那我们问问其他的吧，我看你对并发深入了解，说说volatile的原理吧？（从CPU，高速缓存，MESI协议，lock前缀指令，内存屏障这个思路讲）它解决了什么问题？（讲到了内存屏障以后，他还没听到禁止指令重排）</p>
</li>
<li>
<p>对synchronized了解吗？说说他的基本原理吧？（答了对象头，monitor锁，monitor锁的结构等）锁升级刚提到，就打断了（估计是看看我知道，就不用再问了），他和reentrantLock有啥区别？（重入，公平非公平这方面）什么时候选择synchronized锁，什么时候选择reentrantLock？（我是从常规写多，和读多写少需要分离这个角度说的）</p>
</li>
<li>
<p>我看你说了分布式事务，你们是怎么做的分布式事务？（用的ByteTCC+可靠消息投递+最大努力通知我主动说了ByteTCC的源码和原理，调用链，提交，回滚机制，就没继续问ByteTCC了）还了解过其他的分布式事务吗？（saga,xa分布式事务分别说了一下场景和适用范围）</p>
</li>
<li>
<p>我看你写了zookeeper，了解zookeeper的使用场景和原理吗？（我说只是用来curator框架做分布式锁，其他的没有深入了解过）</p>
</li>
<li>
<p>我看你对数据库了解的挺多的，针对数据库有作过什么优化？（说了进行了索引重建，基于常用的查询条件制定了sql编写原则，说了分库分表，把表分成了2个物理机，8个库，每个库16张表）如果我有一条select a from table1 where a &gt; x order by b desc，对a和b各自创建了两个索引，这条sql会命中哪一个索引，另外一个场景select a from table1 where a &gt; x b&lt;y order by b desc?（没答上来）</p>
</li>
<li>
<p>说一下一条update语句到达mysql引擎之后会做哪些事？（从判断数据是否在缓存，加载数据页，到undolog，redolog，binglog日志文件和位置，commit标记整个流程回答了一下）</p>
</li>
<li>
<p>对JVM也有一定了解是吧？说一下JVM的原理有哪些了解？（有点开放性的东西，会根据你说的方面去问一些东西，我回答了内存分区这方面的东西）知道有哪些垃圾回收器吗各自的特点和适用场景是什么（回答了CMS+Parnew+G1的特点，还有哪些系统适合G1）？你们用的哪个，为什么用这个（说了一下cms + parnew）？（回答了内存小CMS +Parnew）如果有更小的内存呢，比如2G的机器，适合什么回收器？（没答上来，不记得还有啥更小更适合的回收器了）栈里面有什么东西了解吗？怎么优化栈内存？（从组成结构，栈的大小，512k，1M这个角度答的，如果方法调用链比较深的系统，可以考虑增大栈的空间和线程的内存大小）</p>
</li>
<li>
<p>有没有遇到过线上问题？</p>
<p>答的是，有，遇到过一次CPU彪满的情况。场景是，后台结算系统在调用服务，抽了一大堆数据，达到百万级，这个时候刚好有用户在请求一些其他的数据，也是百万级，并且代码写的不好，在list里面疯狂add，导致不断扩容扩容扩容，就导致内存差点儿溢出，大部分请求直接hang死了。</p>
</li>
<li>
<p>有没有什么问题要问我的？</p>
<ol>
<li>本次面试，我的优势点和缺点？<br>
优势：技术点的原理，理解程度都还挺不错的，表达，逻辑也都不错。<br>
劣势：有些地方不需要解释的太详细，大概说一下原理，机制，和思路就可以了。</li>
<li>如果能进公司的话，公司的业务方向和晋升？<br>
国际酒店业务，晋升的话，一年两次答辩，自己写PPT，讲解。</li>
<li>如果我后面要继续面试，或者适应公司的工作的话，公司有哪些技术挑战，需要往哪方面做技术储备？<br>
做的东西还是偏向于业务方面，技术挑战倒是没太多的技术挑战，如果要储备的话，不管是工作还是面试，接下来考察的比较侧重的是架构设计和一些算法。主要是架构设计方面。</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>脚本分享-定位出当前java进程里最耗cpu的那个线程</title>
    <url>/2021/05/17/%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB-%E5%AE%9A%E4%BD%8D%E5%87%BA%E5%BD%93%E5%89%8Djava%E8%BF%9B%E7%A8%8B%E9%87%8C%E6%9C%80%E8%80%97cpu%E7%9A%84%E9%82%A3%E4%B8%AA%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>更多内容请阅读全文：</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [ $# -eq 0 ];then</span><br><span class="line"> echo &quot;please enter java pid&quot;</span><br><span class="line"> exit -1</span><br><span class="line">fi</span><br><span class="line">pid=$1</span><br><span class="line">jstack_cmd=&quot;&quot;</span><br><span class="line">if [[ $JAVA_HOME != &quot;&quot; ]]; then</span><br><span class="line"> jstack_cmd=&quot;$JAVA_HOME/bin/jstack&quot;</span><br><span class="line">else</span><br><span class="line"> r=`which jstack 2&gt;/dev/null`</span><br><span class="line"> if [[ $r != &quot;&quot; ]]; then</span><br><span class="line"> jstack_cmd=$r</span><br><span class="line"> else</span><br><span class="line"> echo &quot;can not find jstack&quot;</span><br><span class="line"> exit -2</span><br><span class="line"> fi</span><br><span class="line">fi</span><br><span class="line">#line=`top -H -o %CPU -b -n 1 -p $pid | sed &#x27;1,/^$/d&#x27; | grep -v $pid | awk &#x27;NR==2&#x27;`</span><br><span class="line">line=`top -H -b -n 1 -p $pid | sed &#x27;1,/^$/d&#x27; | sed &#x27;1d;/^$/d&#x27; | grep -v $pid | sort -nrk9 | head -1`</span><br><span class="line">echo &quot;$line&quot; | awk &#x27;&#123;print &quot;tid: &quot;$1,&quot; cpu: %&quot;$9&#125;&#x27;</span><br><span class="line">tid_0x=`printf &quot;%0x&quot; $(echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;)`</span><br><span class="line">$jstack_cmd $pid | grep $tid_0x -A20 | sed -n &#x27;1,/^$/p&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/goofyww/blog-image/img/20210517021014.JPG" alt=""></p>
]]></content>
      <categories>
        <category>运维-脚本</category>
      </categories>
      <tags>
        <tag>运维-脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>脚本分享-找出访问接口最多的ip</title>
    <url>/2021/05/17/%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB-%E6%89%BE%E5%87%BA%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E6%9C%80%E5%A4%9A%E7%9A%84ip/</url>
    <content><![CDATA[<p>更多内容请阅读全文：</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">/bin/cat /home/gf/ngnix/cupid_access.log |cut -d &#x27; &#x27; -f 1|sort|uniq -c|sort -nr|head -20 &gt; ip.txt</span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line"> ip=`echo $line | awk &#123;&#x27;print $1&#x27;&#125;`</span><br><span class="line"> num=`echo $line | awk &#123;&#x27;print $2&#x27;&#125;`</span><br><span class="line"> num2=`grep $ip /home/gf/ngnix/cupid_access.log|grep v1/customers?page= |wc -l`</span><br><span class="line"> if [ &quot;$num&quot; = &quot;$num2&quot; ];then</span><br><span class="line"> echo &quot;$ip $num&quot;</span><br><span class="line"> fi</span><br><span class="line">done &lt; ip.txt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维-脚本</category>
      </categories>
      <tags>
        <tag>运维-脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>（坑）Spring Boot使用事务不起作用</title>
    <url>/2021/05/19/%EF%BC%88%E5%9D%91%EF%BC%89Spring-Boot%E4%BD%BF%E7%94%A8%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>今天使用spring boot做关于事务的demo时发现在service层使用<code>@Transactional</code>注解运行之后遇到错误并不能回滚。</p>
<span id="more"></span>
<p><strong>爬坑步骤</strong></p>
<pre><code> ①：spring boot的启动类上加上`@EnableTransactionManagement ` 结果：未解决
 ②：修改了数据库表为InnoDB类型 结果：成功解决
</code></pre>
<p>下面是使用Navicat进行修改表类型的步骤：</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/4/17143d09abe62270?w=447&amp;h=144&amp;f=png&amp;s=18175" alt="image.png"></p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/4/17143d09ac3bf419?w=799&amp;h=329&amp;f=png&amp;s=42778" alt="image.png"></p>
<p>成功解决。</p>
<p><strong>总结</strong></p>
<p>mysql的表是有事务安全( 比如：InnoDB)和非事务安全(比如：ISAM、MyISAM)之分的，<br>
针对这种情况，在创建数据库表的时候就应该设置为InnoDB类型，为防止以后开发时需要使用事务。</p>
]]></content>
  </entry>
</search>
